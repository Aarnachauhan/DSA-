gfg
normal brute force- traverse the matrix and find. 
// User function template for C++
class Solution {
  public:
    int rowWithMax1s(vector<vector<int>> &arr) {
        // code here
        int r=arr.size();
        int ans=-1;
        int maxi=0;
        //int cnt=0;
        int c=arr[0].size();
        for(int i=0;i<r;i++){
            int cnt=0;
            for(int j=0;j<c;j++){
                if(arr[i][j]==1) cnt++;
                
            }
            if(cnt>maxi){
                maxi=cnt;
                ans=i;
            }
        }
        return ans;
        
    }
};


binary search 
tc-o()
sc-O(1)
// User function template for C++
class Solution {
  public:
  int lowerbound(vector<int> &arr , int n , int x){
      int low=0 , high=n-1;
      int ans=n;
      while(low<=high){
          int mid=(low + high)/2;
          if(arr[mid]>=x){
              ans=mid;
              high=mid-1;
          }else{
              low=mid+1;
          }
      }
      return ans;
      
  }
    int rowWithMax1s(vector<vector<int>> &arr) {
        // code here
        int cnt_max=0; // if there is no 1 in the row , lb(1)=0 and this will be 0 only
        int n=arr.size();
        int m=arr[0].size();
        int index=-1;
        for(int i=0;i<n;i++){
            int cnt_ones= m-lowerbound(arr[i] , m , 1);
            if(cnt_ones > cnt_max){
                cnt_max=cnt_ones;
                index=i;
            }
        }
        return index;
    }
};
