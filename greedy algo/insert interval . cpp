
beats 18%
class Solution {
public:
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
        intervals.push_back(newInterval);
        sort(intervals.begin(),intervals.end());

        vector<vector<int>> res;

        res.push_back(intervals[0]);

        for(int i=1;i< intervals.size();i++){
            if(res.back()[1]>=intervals[i][0]) {
                res.back()[1]= max(res.back()[1], intervals[i][1]);
            }else{
                res.push_back(intervals[i]);
            }
        }
        return res;
    }
};
tc- o(n)
sc-o(n) for storing
beats 100%
class Solution {
public:
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
        vector<vector<int>> result;

        for (auto& interval : intervals) {
            // Case 1: No overlap, interval ends before newInterval starts
            if (interval[1] < newInterval[0]) {
                result.push_back(interval);
            }
            // Case 2: No overlap, interval starts after newInterval ends
            else if (interval[0] > newInterval[1]) {
                result.push_back(newInterval);
                newInterval = interval; // treat current interval as new interval
            }
            // Case 3: Overlap - merge intervals
            //interval[0] <newinterval[1]
            //matlab interval shuru ho  gaya bina newinterval k end huye
            else {
                newInterval[0] = min(newInterval[0], interval[0]);
                newInterval[1] = max(newInterval[1], interval[1]);
            }
        }

        // Add the final newInterval
        result.push_back(newInterval);

        return result;
    }
};
