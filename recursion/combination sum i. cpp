lc 39

Complexity
Time complexity:
o(2^t * k)
t is the max no of calls needed to make target=0
k is the avg length of the candidates

Space complexity:
o(k*x)
where k is the avg length of the candidates
and
x is the no of combinations

class Solution {
public:
    void comb(int ind,int target, vector<int> &candidates,vector<vector<int>> &ans, vector<int> &ds){
        if(ind ==candidates.size()){
            if(target==0){
                ans.push_back(ds);
            }
            return;
        }
        if(candidates[ind]<=target){
            ds.push_back(candidates[ind]);
            comb(ind,target-candidates[ind],candidates,ans,ds);
            ds.pop_back();
        }
        comb(ind+1,target,candidates,ans,ds);
    }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> ans;
        vector<int> ds;
        comb(0,target,candidates,ans,ds);
        return ans;
    }
};
